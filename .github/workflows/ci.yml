name: CI/CD Pipeline

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

jobs:
  build-test-deploy:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ ubuntu-latest, windows-latest ]
        qt-version: [ '6.5.0' ]
        include:
          - os: ubuntu-latest
            build-dir: build
            executable: AdvancedTicTacToe
            artifact_name: AdvancedTicTacToe-linux
          - os: windows-latest
            build-dir: build/Release
            executable: AdvancedTicTacToe.exe
            artifact_name: AdvancedTicTacToe-windows

    steps:
      # ===== SETUP =====
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Qt
        uses: jurplel/install-qt-action@v3
        with:
          version: ${{ matrix.qt-version }}
          cached: true
          setup-python: false  # Prevent potential conflicts

      - name: Install dependencies
        shell: bash
        run: |
          if [ "${{ matrix.os }}" = "ubuntu-latest" ]; then
            sudo apt-get update
            sudo apt-get install -y build-essential zip
          else
            choco install cmake 7zip -y
          fi

      # ===== BUILD & TEST =====
      - name: Configure CMake
        shell: bash
        run: cmake -B build -DCMAKE_BUILD_TYPE=Release -DENABLE_TESTS=ON

      - name: Build project
        shell: bash
        run: cmake --build build --config Release

      - name: Verify executable exists
        shell: bash
        run: |
          echo "Build directory contents:"
          ls ${{ matrix.build-dir }}
          if [ ! -f "${{ matrix.build-dir }}/${{ matrix.executable }}" ]; then
            echo "Executable not found!"
            exit 1
          fi

      # ===== ARTIFACT PREPARATION =====
      - name: Prepare artifact
        shell: bash
        run: |
          mkdir -p package
          cp "${{ matrix.build-dir }}/${{ matrix.executable }}" package/
          
          if [ "${{ matrix.os }}" = "ubuntu-latest" ]; then
            cp -r resources package/
            zip -r ${{ matrix.artifact_name }}.zip package/
          else
            # Set PATH to include Qt binaries explicitly
            export PATH="/opt/qt/${{ matrix.qt-version }}/msvc2019_64/bin:$PATH"
            
            # Run windeployqt with error handling
            if windeployqt package/${{ matrix.executable }} --release --no-translations; then
              echo "Qt deployment successful"
            else
              echo "Warning: Qt deployment had issues, continuing anyway"
            fi
            
            # Copy necessary DLLs
            cp "${{ matrix.build-dir }}"/*.dll package/
            7z a ${{ matrix.artifact_name }}.zip package/*
          fi

      # ===== ARTIFACT UPLOAD (API VERSION) =====
      - name: Upload artifact via API
        shell: bash
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          REPO: ${{ github.repository }}
        run: |
          # Debug: Show files before upload
          ls -lh

          # Get file size (works for both Linux and Windows)
          if [ "${{ matrix.os }}" = "windows-latest" ]; then
            FILE_SIZE=$(stat -c%s "${{ matrix.artifact_name }}.zip" 2>/dev/null || stat -f%z "${{ matrix.artifact_name }}.zip")
          else
            FILE_SIZE=$(stat -c%s "${{ matrix.artifact_name }}.zip")
          fi

          echo "Preparing to upload ${{ matrix.artifact_name }}.zip (size: $FILE_SIZE bytes)"

          # Create artifact via API
          RESPONSE=$(curl -s -X POST \
            -H "Authorization: Bearer $GITHUB_TOKEN" \
            -H "Accept: application/vnd.github.v3+json" \
            -H "Content-Type: application/json" \
            "https://api.github.com/repos/$REPO/actions/artifacts" \
            -d '{"name":"'"${{ matrix.artifact_name }}"'","size":'"$FILE_SIZE"'}')

          echo "API Response: $RESPONSE"

          # Extract upload URL
          UPLOAD_URL=$(echo "$RESPONSE" | jq -r '.upload_url' | sed 's/{.*}//')
          
          if [ -z "$UPLOAD_URL" ] || [ "$UPLOAD_URL" = "null" ]; then
            echo "Error: Failed to get upload URL"
            exit 1
          fi

          echo "Uploading to: $UPLOAD_URL"

          # Perform the upload
          curl -X PUT \
            -H "Authorization: Bearer $GITHUB_TOKEN" \
            -H "Content-Type: application/zip" \
            --data-binary @"${{ matrix.artifact_name }}.zip" \
            "$UPLOAD_URL?name=${{ matrix.artifact_name }}.zip"

          if [ $? -ne 0 ]; then
            echo "Upload failed"
            exit 1
          fi

          echo "Artifact uploaded successfully"
