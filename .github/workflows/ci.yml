name: CI/CD Pipeline

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  release:
    types: [ created ]

jobs:
  build-test-deploy:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ ubuntu-latest, windows-latest ]
        qt-version: [ '6.5.0' ]
        include:
          - os: ubuntu-latest
            artifact_name: tictactoe-linux
          - os: windows-latest
            artifact_name: tictactoe-windows

    steps:
    # ===== SETUP =====
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Setup Qt
      uses: jurplel/install-qt-action@v3
      with:
        version: ${{ matrix.qt-version }}
        cached: true

    - name: Install dependencies
      run: |
        if [ "${{ matrix.os }}" == "ubuntu-latest" ]; then
          sudo apt-get update
          sudo apt-get install -y build-essential zip
        else
          choco install cmake 7zip -y
        fi

    # ===== BUILD & TEST =====
    - name: Configure CMake
      run: cmake -B build -DCMAKE_BUILD_TYPE=Release -DENABLE_TESTS=ON

    - name: Build project
      run: cmake --build build --config Release

    - name: Run tests
      run: |
        cd build
        ctest --output-on-failure || (echo "Tests failed!"; exit 1)

    # ===== ARTIFACT PREPARATION =====
    - name: Prepare Linux artifact
      if: matrix.os == 'ubuntu-latest'
      run: |
        mkdir -p package
        cp build/tictactoe package/
        cp -r resources package/
        zip -r ${{ matrix.artifact_name }}.zip package/

    - name: Prepare Windows artifact
      if: matrix.os == 'windows-latest'
      run: |
        mkdir -p package
        windeployqt build/Release/tictactoe.exe --release
        cp build/Release/tictactoe.exe package/
        cp build/Release/*.dll package/
        7z a ${{ matrix.artifact_name }}.zip package/*

    # ===== ARTIFACT UPLOAD (FALLBACK METHOD) =====
    - name: Upload artifact via API
      shell: bash
      run: |
        # Get upload URL
        RESPONSE=$(curl -s -X POST \
          -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
          -H "Accept: application/vnd.github.v3+json" \
          "https://api.github.com/repos/${{ github.repository }}/actions/artifacts" \
          -d '{"name":"'"${{ matrix.artifact_name }}"'","size":'"$(stat -c%s "${{ matrix.artifact_name }}.zip")"'}')
        
        UPLOAD_URL=$(echo "$RESPONSE" | jq -r '.upload_url' | sed "s/{.*}//")
        
        # Upload file
        curl -X PUT \
          -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
          -H "Content-Type: application/zip" \
          --data-binary @"${{ matrix.artifact_name }}.zip" \
          "$UPLOAD_URL?name=${{ matrix.artifact_name }}.zip"

    # ===== RELEASE DEPLOYMENT =====
    - name: Publish release
      if: github.event_name == 'release'
      uses: softprops/action-gh-release@v1
      with:
        files: |
          ${{ matrix.artifact_name }}.zip
