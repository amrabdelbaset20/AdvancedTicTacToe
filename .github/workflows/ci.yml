name: CI/CD Pipeline

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

jobs:
  build-test-deploy:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ ubuntu-latest, windows-latest ]
        qt-version: [ '6.5.0' ]
        include:
          - os: ubuntu-latest
            build-dir: build
            executable: AdvancedTicTacToe
            artifact_name: AdvancedTicTacToe-linux
            shell: bash
          - os: windows-latest
            build-dir: build/Release
            executable: AdvancedTicTacToe.exe
            artifact_name: AdvancedTicTacToe-windows
            shell: pwsh

    steps:
    # ===== SETUP =====
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Setup Qt
      uses: jurplel/install-qt-action@v3
      with:
        version: ${{ matrix.qt-version }}
        cached: true

    - name: Install dependencies
      shell: ${{ matrix.shell }}
      run: |
        if ("${{ matrix.os }}" -eq "ubuntu-latest") {
          sudo apt-get update
          sudo apt-get install -y build-essential zip
        } else {
          choco install cmake 7zip -y
        }

    # ===== BUILD & TEST =====
    - name: Configure CMake
      shell: ${{ matrix.shell }}
      run: cmake -B build -DCMAKE_BUILD_TYPE=Release -DENABLE_TESTS=ON

    - name: Build project
      shell: ${{ matrix.shell }}
      run: cmake --build build --config Release

    - name: Verify executable exists
      shell: ${{ matrix.shell }}
      run: |
        Write-Output "Build directory contents:"
        ls ${{ matrix.build-dir }}
        if (!(Test-Path "${{ matrix.build-dir }}/${{ matrix.executable }}")) {
          Write-Error "Executable not found!"
          exit 1
        }

    # ===== ARTIFACT PREPARATION =====
    - name: Prepare artifact
      shell: ${{ matrix.shell }}
      run: |
        mkdir -p package
        Copy-Item "${{ matrix.build-dir }}/${{ matrix.executable }}" package/
        if ("${{ matrix.os }}" -eq "ubuntu-latest") {
          Copy-Item -Recurse resources package/
          zip -r ${{ matrix.artifact_name }}.zip package/
        } else {
          windeployqt package/${{ matrix.executable }} --release
          Copy-Item "${{ matrix.build-dir }}/*.dll" package/
          7z a ${{ matrix.artifact_name }}.zip package/*
        }

    # ===== ARTIFACT UPLOAD =====
    - name: Upload artifact via API
      shell: bash
      run: |
        # Get upload URL (works for both Linux and Windows)
        RESPONSE=$(curl -s -X POST \
          -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
          -H "Accept: application/vnd.github.v3+json" \
          "https://api.github.com/repos/${{ github.repository }}/actions/artifacts" \
          -d '{"name":"'"${{ matrix.artifact_name }}"'","size":'"$(stat -c%s "${{ matrix.artifact_name }}.zip" 2>/dev/null || echo 0)"'}')
        
        UPLOAD_URL=$(echo "$RESPONSE" | jq -r '.upload_url' | sed "s/{.*}//")
        
        if [ -z "$UPLOAD_URL" ]; then
          echo "Failed to get upload URL"
          exit 1
        fi
        
        curl -X PUT \
          -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
          -H "Content-Type: application/zip" \
          --data-binary @"${{ matrix.artifact_name }}.zip" \
          "$UPLOAD_URL?name=${{ matrix.artifact_name }}.zip" || (echo "Upload failed"; exit 1)
