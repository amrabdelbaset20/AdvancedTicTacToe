name: CI/CD Pipeline

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

jobs:
  build-test-deploy:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ ubuntu-latest, windows-latest ]
        qt-version: [ '6.5.0' ]
        include:
          - os: ubuntu-latest
            build-dir: build
            executable: AdvancedTicTacToe
            artifact_name: AdvancedTicTacToe-linux
          - os: windows-latest
            build-dir: build/Release
            executable: AdvancedTicTacToe.exe
            artifact_name: AdvancedTicTacToe-windows

    steps:
      # ===== SETUP =====
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Qt
        uses: jurplel/install-qt-action@v3
        with:
          version: ${{ matrix.qt-version }}
          cached: true
          setup-python: false

      - name: Install dependencies
        shell: bash
        run: |
          if [ "${{ matrix.os }}" = "ubuntu-latest" ]; then
            sudo apt-get update
            sudo apt-get install -y build-essential zip
          else
            choco install cmake 7zip -y
          fi

      # ===== BUILD & TEST =====
      - name: Configure CMake
        shell: bash
        run: cmake -B build -DCMAKE_BUILD_TYPE=Release -DENABLE_TESTS=ON

      - name: Build project
        shell: bash
        run: cmake --build build --config Release

      - name: Verify executable exists
        shell: bash
        run: |
          echo "Build directory contents:"
          ls ${{ matrix.build-dir }}
          if [ ! -f "${{ matrix.build-dir }}/${{ matrix.executable }}" ]; then
            echo "Executable not found!"
            exit 1
          fi

      # ===== ARTIFACT PREPARATION =====
      - name: Prepare artifact
        shell: bash
        run: |
          mkdir -p package
          cp "${{ matrix.build-dir }}/${{ matrix.executable }}" package/
          
          if [ "${{ matrix.os }}" = "ubuntu-latest" ]; then
            # Linux packaging
            cp -r resources package/
            zip -r ${{ matrix.artifact_name }}.zip package/
          else
            # Windows packaging
            echo "Setting up Qt paths..."
            export QT_PATH=$(find /opt/qt -name "msvc2019_64" -type d | head -1)
            export PATH="$QT_PATH/bin:$PATH"
            
            echo "Running windeployqt..."
            if windeployqt package/${{ matrix.executable }} --release --no-translations; then
              echo "Qt deployment successful"
            else
              echo "Warning: Qt deployment had issues, continuing anyway"
            fi
            
            echo "Copying additional dependencies..."
            # Copy DLLs only if they exist
            if ls "${{ matrix.build-dir }}"/*.dll 1> /dev/null 2>&1; then
              cp "${{ matrix.build-dir }}"/*.dll package/
            else
              echo "No additional DLLs found to copy"
            fi
            
            echo "Creating final zip..."
            7z a ${{ matrix.artifact_name }}.zip package/*
          fi

      # ===== ARTIFACT UPLOAD =====
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.artifact_name }}
          path: ${{ matrix.artifact_name }}.zip
          retention-days: 5
